// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id              String         @id @default(cuid())
    notificationId  String         @default(cuid())
    name            String?
    fullName        String?
    phone           String?
    email           String?        @unique
    emailVerified   DateTime?
    image           String?
    avatar          Image?         @relation(fields: [avatarId], references: [id])
    avatarId        String?
    telegramEnabled Boolean?       @default(false)
    whatsappEnabled Boolean?       @default(false)
    role            Role           @default(user)
    accounts        Account[]
    sessions        Session[]
    orders          Order[]
    excursions      Excursion[]
    photos          Photo[]
    posts           Post[]
    reviews         Review[]
    notifications   Notification[]
    partner         Partner[]
    images          Image[]        @relation("createdBy")
    imageToken      ImageToken?
}

model Image {
    id          String   @id @default(cuid())
    url         String
    aspectRatio Float
    title       String?
    createdBy   User     @relation("createdBy", fields: [userId], references: [id])
    userId      String
    Post        Post[]
    Photo       Photo[]
    Review      Review[]
    User        User[]
}

model ImageToken {
    id      String   @id @default(cuid())
    expires DateTime
    user    User     @relation(fields: [userId], references: [id])
    userId  String   @unique
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    text      String   @db.Text
    views     Int      @default(0)
    createdBy User     @relation(fields: [userId], references: [id])
    userId    String
    image     Image?   @relation(fields: [imageId], references: [id])
    imageId   String?
    srcUrl    String?  @db.Text
}

model Photo {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String?  @db.Text
    category    String
    views       Int      @default(0)
    image       Image?   @relation(fields: [imageId], references: [id])
    imageId     String?
    createdBy   User     @relation(fields: [userId], references: [id])
    userId      String
}

model Review {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    text      String   @db.Text
    stars     Int
    checked   Boolean  @default(false)
    views     Int      @default(0)
    image     Image?   @relation(fields: [imageId], references: [id])
    imageId   String?
    createdBy User     @relation(fields: [userId], references: [id])
    userId    String
}

model Order {
    id               String           @id @default(cuid())
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    name             String
    phoneNumber      String
    groupSize        Int
    dateFrom         DateTime
    dateTo           DateTime
    status           OrderStatus      @default(new)
    comment          String?          @db.Text //User's comment 
    note             String?          @db.Text //Admin's note
    createdBy        User?            @relation(fields: [userId], references: [id])
    userId           String?
    excursion        Excursion?       @relation(fields: [excursionId], references: [id])
    excursionId      String?
    excursionGroup   ExcursionGroup?  @relation(fields: [excursionGroupId], references: [id])
    excursionGroupId String?
    excursionStatus  ExcursionStatus?
    partner          Partner?         @relation(fields: [partnerId], references: [id])
    partnerId        String?
    promocode        Promocode?       @relation(fields: [promocodeId], references: [id])
    promocodeId      String?
    confirmations    Notification[]   @relation("confirmation")
    notifications    Notification[]   @relation("notification")
}

model Excursion {
    id              String           @id @default(cuid())
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    isActive        Boolean          @default(true)
    createdBy       User             @relation(fields: [userId], references: [id])
    userId          String
    orders          Order[]
    excursionGroups ExcursionGroup[]
    notifications   Notification[]
}

model ExcursionGroup {
    id            String    @id @default(cuid())
    number        Int
    time          DateTime?
    currentSize   Int?      @default(0)
    maxSize       Int?
    currentOrders Int?      @default(0)
    maxOrders     Int?
    excursion     Excursion @relation(fields: [excursionId], references: [id], onDelete: Cascade)
    excursionId   String
    Order         Order[]

    @@unique([number, excursionId])
}

model Notification {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    text           String           @db.Text
    forUser        User             @relation(fields: [userId], references: [id])
    userId         String
    type           NotificationType @default(text)
    hidden         Boolean          @default(false)
    checked        DateTime?
    firstLoad      DateTime?
    link           String?          @db.Text
    order          Order?           @relation("notification", fields: [orderId], references: [id])
    orderId        String?
    confirmation   Order?           @relation("confirmation", fields: [confirmationId], references: [id])
    confirmationId String?
    excursion      Excursion?       @relation(fields: [excursionId], references: [id])
    excursionId    String?
    confirmed      DateTime?
}

model Partner {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    referralId  String      @unique
    name        String
    description String?     @db.Text
    user        User?       @relation(fields: [userId], references: [id])
    userId      String?
    promocodes  Promocode[]
    orders      Order[]
}

model Promocode {
    id        String        @id @default(cuid())
    code      String        @unique
    type      PromocodeType
    valid     Boolean       @default(true)
    partner   Partner       @relation(fields: [partnerId], references: [id])
    partnerId String
    Order     Order[]
}

enum Role {
    guest
    user
    admin
    root
}

enum OrderStatus {
    new
    registered
    active
    fulfilled
    cancelled
}

enum ExcursionStatus {
    inqueue
    pending
    accepted
    cancelled
}

enum NotificationType {
    text
    confirmation
    link
}

enum PromocodeType {
    discount
    queuePriority
}
